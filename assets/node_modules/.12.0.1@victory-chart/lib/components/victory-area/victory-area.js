Object.defineProperty(exports,"__esModule",{value:true});var _partialRight2=require("lodash/partialRight");var _partialRight3=_interopRequireDefault(_partialRight2);var _defaults2=require("lodash/defaults");var _defaults3=_interopRequireDefault(_defaults2);var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);var _assign2=require("lodash/assign");var _assign3=_interopRequireDefault(_assign2);var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();
var _react=require("react");var _react2=_interopRequireDefault(_react);
var _helperMethods=require("./helper-methods");var _helperMethods2=_interopRequireDefault(_helperMethods);
var _data=require("../../helpers/data");var _data2=_interopRequireDefault(_data);
var _domain=require("../../helpers/domain");var _domain2=_interopRequireDefault(_domain);
var _victoryCore=require("victory-core");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}




var fallbackProps={
width:450,
height:300,
padding:50,
interpolation:"linear"};var


VictoryArea=function(_React$Component){_inherits(VictoryArea,_React$Component);















































































































































































































































































































































function VictoryArea(){_classCallCheck(this,VictoryArea);var _this=_possibleConstructorReturn(this,(VictoryArea.__proto__||Object.getPrototypeOf(VictoryArea)).call(this));

_this.state={};
var getScopedEvents=_victoryCore.Events.getScopedEvents.bind(_this);
_this.getEvents=(0,_partialRight3.default)(_victoryCore.Events.getEvents.bind(_this),getScopedEvents);
_this.getEventState=_victoryCore.Events.getEventState.bind(_this);return _this;
}_createClass(VictoryArea,[{key:"componentWillMount",value:function componentWillMount()

{
this.setupEvents(this.props);
}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(

newProps){
this.setupEvents(newProps);
}},{key:"setupEvents",value:function setupEvents(

props){var
sharedEvents=props.sharedEvents;
var components=["dataComponent","labelComponent","groupComponent","containerComponent"];
this.componentEvents=_victoryCore.Events.getComponentEvents(props,components);
this.baseProps=_helperMethods2.default.getBaseProps(props,fallbackProps);
this.getSharedEventState=sharedEvents&&(0,_isFunction3.default)(sharedEvents.getEventState)?
sharedEvents.getEventState:function(){return undefined;};
this.hasEvents=props.events||props.sharedEvents||this.componentEvents;
}},{key:"renderData",value:function renderData(

props){var _this2=this;var
dataComponent=props.dataComponent;var labelComponent=props.labelComponent;var groupComponent=props.groupComponent;var clipId=props.clipId;var
role=VictoryArea.role;
var getComponentProps=function getComponentProps(component,type){
var key="all";
if(_this2.hasEvents){
var events=_this2.getEvents(props,type,key);
var componentProps=(0,_defaults3.default)(
{role:""+role,clipId:clipId},
_this2.getEventState(key,type),
_this2.getSharedEventState(key,type),
component.props,
_this2.baseProps[key][type]);

return(0,_assign3.default)(
{},componentProps,{events:_victoryCore.Events.getPartialEvents(events,key,componentProps)});

}
return(0,_defaults3.default)({role:""+role,clipId:clipId},component.props,_this2.baseProps[key][type]);
};

var dataProps=getComponentProps(dataComponent,"data");
var areaComponent=_react2.default.cloneElement(dataComponent,dataProps);

if(this.baseProps.all.labels||this.hasEvents){
var labelProps=getComponentProps(labelComponent,"labels");
if(labelProps&&labelProps.text!==undefined){
var areaLabel=_react2.default.cloneElement(labelComponent,labelProps);
return _react2.default.cloneElement(groupComponent,{},areaComponent,areaLabel);
}
}
return areaComponent;
}},{key:"renderContainer",value:function renderContainer(

props,group){
var parentProps=void 0;
if(this.hasEvents){
var parentEvents=this.getEvents(props,"parent","parent");
var baseProps=(0,_defaults3.default)(
{},
this.getEventState("parent","parent"),
this.getSharedEventState("parent","parent"),
props.containerComponent.props,
this.baseProps.parent);

parentProps=(0,_assign3.default)(
{},baseProps,{events:_victoryCore.Events.getPartialEvents(parentEvents,"parent",baseProps)});

}else{
parentProps=(0,_defaults3.default)({},props.containerComponent.props,this.baseProps.parent);
}

return _react2.default.cloneElement(props.containerComponent,parentProps,group);
}},{key:"renderGroup",value:function renderGroup(

children,props,style){var
clipPathComponent=props.clipPathComponent;

var clipComponent=_react2.default.cloneElement(clipPathComponent,{
padding:props.padding,
clipId:props.clipId,
translateX:props.translateX||0,
clipWidth:props.clipWidth||props.width,
clipHeight:props.clipHeight||props.height});


return _react2.default.cloneElement(
this.props.groupComponent,
{role:"presentation",style:style},
children,
clipComponent);

}},{key:"render",value:function render()

{
var clipId=this.props.clipId||Math.round(Math.random()*10000);
var props=_victoryCore.Helpers.modifyProps((0,_assign3.default)({clipId:clipId},this.props),fallbackProps,"area");var
animate=props.animate;var style=props.style;var standalone=props.standalone;var theme=props.theme;

if(animate){
var whitelist=[
"data","domain","height","padding","style","width",
"x","y"];

return(
_react2.default.createElement(_victoryCore.VictoryTransition,{animate:animate,animationWhitelist:whitelist},
_react2.default.createElement(this.constructor,props)));


}

var styleObject=theme&&theme.area?theme.area.style:{};

var baseStyles=_victoryCore.Helpers.getStyles(style,styleObject,"auto","100%");

var group=this.renderGroup(
this.renderData(props),props,baseStyles.parent);


return standalone?this.renderContainer(props,group):group;
}}]);return VictoryArea;}(_react2.default.Component);VictoryArea.displayName="VictoryArea";VictoryArea.role="area";VictoryArea.defaultTransitions=_victoryCore.DefaultTransitions.continuousTransitions();VictoryArea.propTypes={/**
     * The animate prop specifies props for VictoryAnimation to use. The animate prop should
     * also be used to specify enter and exit transition configurations with the `onExit`
     * and `onEnter` namespaces respectively.
     * @examples {duration: 500, onEnd: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}
     */animate:_react.PropTypes.object,/**
     * The categories prop specifies how categorical data for a chart should be ordered.
     * This prop should be given as an array of string values, or an object with
     * these arrays of values specified for x and y. If this prop is not set,
     * categorical data will be plotted in the order it was given in the data array
     * @examples ["dogs", "cats", "mice"]
     */categories:_react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.string),_react.PropTypes.shape({x:_react.PropTypes.arrayOf(_react.PropTypes.string),y:_react.PropTypes.arrayOf(_react.PropTypes.string)})]),/**
     * The data prop specifies the data to be plotted. Data should be in the form of an array
     * of data points, or an array of arrays of data points for multiple datasets.
     * Each data point may be any format you wish (depending on the `x` and `y` accessor props),
     * but by default, an object with x and y properties is expected.
     * @examples [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],
     * [[{x: "a", y: 1}, {x: "b", y: 2}], [{x: "a", y: 2}, {x: "b", y: 3}]]
     */data:_react.PropTypes.array,/**
     * The domainPadding prop specifies a number of pixels of padding to add to the
     * beginning and end of a domain. This prop is useful for explicitly spacing ticks farther
     * from the origin to prevent crowding. This prop should be given as an object with
     * numbers specified for x and y.
     */domainPadding:_react.PropTypes.oneOfType([_react.PropTypes.shape({x:_react.PropTypes.oneOfType([_react.PropTypes.number,_victoryCore.PropTypes.domain]),y:_react.PropTypes.oneOfType([_react.PropTypes.number,_victoryCore.PropTypes.domain])}),_react.PropTypes.number]),/**
     * The dataComponent prop takes an entire component which will be used to create an area.
     * The new element created from the passed dataComponent will be provided with the
     * following properties calculated by VictoryArea: a scale, style, events, interpolation,
     * and an array of modified data objects (including x, y, and calculated y0 and y1).
     * Any of these props may be overridden by passing in props to the supplied component,
     * or modified or ignored within the custom component itself. If a dataComponent is
     * not provided, VictoryArea will use its default Area component.
     */dataComponent:_react.PropTypes.element,/**
     * The domain prop describes the range of values your bar chart will cover. This prop can be
     * given as a array of the minimum and maximum expected values for your bar chart,
     * or as an object that specifies separate arrays for x and y.
     * If this prop is not provided, a domain will be calculated from data, or other
     * available information.
     * @examples [-1, 1], {x: [0, 100], y: [0, 1]}
     */domain:_react.PropTypes.oneOfType([_victoryCore.PropTypes.domain,_react.PropTypes.shape({x:_victoryCore.PropTypes.domain,y:_victoryCore.PropTypes.domain})]),/**
     * The event prop take an array of event objects. Event objects are composed of
     * a target, an eventKey, and eventHandlers. Targets may be any valid style namespace
     * for a given component, so "data" and "labels" are all valid targets for VictoryArea events.
     * Since VictoryArea only renders a single element, the eventKey property is not used.
     * The eventHandlers object should be given as an object whose keys are standard
     * event names (i.e. onClick) and whose values are event callbacks. The return value
     * of an event handler is used to modify elemnts. The return value should be given
     * as an object or an array of objects with optional target and eventKey keys,
     * and a mutation key whose value is a function. The target and eventKey keys
     * will default to those corresponding to the element the event handler was attached to.
     * The mutation function will be called with the calculated props for the individual selected
     * element (i.e. an area), and the object returned from the mutation function
     * will override the props of the selected element via object assignment.
     * @examples
     * events={[
     *   {
     *     target: "data",
     *     eventHandlers: {
     *       onClick: () => {
     *         return [
     *            {
     *              mutation: (props) => {
     *                return {style: merge({}, props.style, {fill: "orange"})};
     *              }
     *            }, {
     *              target: "labels",
     *              mutation: () => {
     *                return {text: "hey"};
     *              }
     *            }
     *          ];
     *       }
     *     }
     *   }
     * ]}
     *}}
     */events:_react.PropTypes.arrayOf(_react.PropTypes.shape({target:_react.PropTypes.oneOf(["data","labels","parent"]),eventKey:_react.PropTypes.oneOf(["all"]),eventHandlers:_react.PropTypes.object})),/**
     * The name prop is used to reference a component instance when defining shared events.
     */name:_react.PropTypes.string,/**
     * This prop is used to coordinate events between VictoryArea and other Victory
     * Components via VictorySharedEvents. This prop should not be set manually.
     */sharedEvents:_react.PropTypes.shape({events:_react.PropTypes.array,getEventState:_react.PropTypes.func}),/**
     * The height props specifies the height the svg viewBox of the chart container.
     * This value should be given as a number of pixels
     */height:_victoryCore.PropTypes.nonNegative,/**
     * The interpolation prop determines how data points should be connected
     * when plotting a line
     */interpolation:_react.PropTypes.oneOf(["basis","basisClosed","basisOpen","bundle","cardinal","cardinalClosed","cardinalOpen","catmullRom","catmullRomClosed","catmullRomOpen","linear","linearClosed","monotoneX","monotoneY","natural","radial","step","stepAfter","stepBefore"]),/**
     * The label prop defines the label that will appear at the edge of the area.
     * This prop should be given a string or as a function of data. If individual
     * labels are required for each data point, they should be created by composing
     * VictoryArea with VictoryScatter
     * @examples: "Series 1", (data) => `${data.length} points`
     */label:_react.PropTypes.string,/**
     * The labelComponent prop takes in an entire label component which will be used
     * to create a label for the area. The new element created from the passed labelComponent
     * will be supplied with the following properties: x, y, index, data, verticalAnchor,
     * textAnchor, angle, style, text, and events. any of these props may be overridden
     * by passing in props to the supplied component, or modified or ignored within
     * the custom component itself. If labelComponent is omitted, a new VictoryLabel
     * will be created with props described above. This labelComponent prop should be used to
     * provide a series label for VictoryArea. If individual labels are required for each
     * data point, they should be created by composing VictoryArea with VictoryScatter
     */labelComponent:_react.PropTypes.element,/**
     * The padding props specifies the amount of padding in number of pixels between
     * the edge of the chart and any rendered child components. This prop can be given
     * as a number or as an object with padding specified for top, bottom, left
     * and right.
     */padding:_react.PropTypes.oneOfType([_react.PropTypes.number,_react.PropTypes.shape({top:_react.PropTypes.number,bottom:_react.PropTypes.number,left:_react.PropTypes.number,right:_react.PropTypes.number})]),/**
     * The samples prop specifies how many individual points to plot when plotting
     * y as a function of x. Samples is ignored if x props are provided instead.
     */samples:_victoryCore.PropTypes.nonNegative,/**
     * The scale prop determines which scales your chart should use. This prop can be
     * given as a string specifying a supported scale ("linear", "time", "log", "sqrt"),
     * as a d3 scale function, or as an object with scales specified for x and y
     * @exampes d3Scale.time(), {x: "linear", y: "log"}
     */scale:_react.PropTypes.oneOfType([_victoryCore.PropTypes.scale,_react.PropTypes.shape({x:_victoryCore.PropTypes.scale,y:_victoryCore.PropTypes.scale})]),/**
     * The standalone prop determines whether the component will render a standalone svg
     * or a <g> tag that will be included in an external svg. Set standalone to false to
     * compose VictoryBar with other components within an enclosing <svg> tag.
     */standalone:_react.PropTypes.bool,/**
     * The style prop specifies styles for your VictoryArea. Any valid inline style properties
     * will be applied. Height, width, and padding should be specified via the height,
     * width, and padding props, as they are used to calculate the alignment of
     * components within chart.
     * @examples {data: {fill: "red"}, labels: {fontSize: 12}}
     */style:_react.PropTypes.shape({parent:_react.PropTypes.object,data:_react.PropTypes.object,labels:_react.PropTypes.object}),/**
     * The width props specifies the width of the svg viewBox of the chart container
     * This value should be given as a number of pixels
     */width:_victoryCore.PropTypes.nonNegative,/**
     * The x prop specifies how to access the X value of each data point.
     * If given as a function, it will be run on each data point, and returned value will be used.
     * If given as an integer, it will be used as an array index for array-type data points.
     * If given as a string, it will be used as a property key for object-type data points.
     * If given as an array of strings, or a string containing dots or brackets,
     * it will be used as a nested object property path (for details see Lodash docs for _.get).
     * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).
     * @examples 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)
     */x:_react.PropTypes.oneOfType([_react.PropTypes.func,_victoryCore.PropTypes.allOfType([_victoryCore.PropTypes.integer,_victoryCore.PropTypes.nonNegative]),_react.PropTypes.string,_react.PropTypes.arrayOf(_react.PropTypes.string)]),/**
     * The y prop specifies how to access the Y value of each data point.
     * If given as a function, it will be run on each data point, and returned value will be used.
     * If given as an integer, it will be used as an array index for array-type data points.
     * If given as a string, it will be used as a property key for object-type data points.
     * If given as an array of strings, or a string containing dots or brackets,
     * it will be used as a nested object property path (for details see Lodash docs for _.get).
     * If `null` or `undefined`, the data value will be used as is (identity function/pass-through).
     * @examples 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)
     */y:_react.PropTypes.oneOfType([_react.PropTypes.func,_victoryCore.PropTypes.allOfType([_victoryCore.PropTypes.integer,_victoryCore.PropTypes.nonNegative]),_react.PropTypes.string,_react.PropTypes.arrayOf(_react.PropTypes.string),_react.PropTypes.arrayOf(_react.PropTypes.func)]),/**
     * The containerComponent prop takes an entire component which will be used to
     * create a container element for standalone charts.
     * The new element created from the passed containerComponent wil be provided with
     * these props from VictoryArea: height, width, children
     * (the chart itself) and style. Props that are not provided by the
     * child chart component include title and desc, both of which
     * are intended to add accessibility to Victory components. The more descriptive these props
     * are, the more accessible your data will be for people using screen readers.
     * Any of these props may be overridden by passing in props to the supplied component,
     * or modified or ignored within the custom component itself. If a dataComponent is
     * not provided, VictoryArea will use the default VictoryContainer component.
     * @examples <VictoryContainer title="Chart of Dog Breeds" desc="This chart shows how
     * popular each dog breed is by percentage in Seattle." />
     */containerComponent:_react.PropTypes.element,/**
    * The theme prop takes a style object with nested data, labels, and parent objects.
    * You can create this object yourself, or you can use a theme provided by Victory.
    * When using VictoryArea as a solo component, implement the theme directly on
    * VictoryArea. If you are wrapping VictoryArea in VictoryChart, VictoryStack, or
    * VictoryGroup, please call the theme on the outermost wrapper component instead.
    * @examples theme={VictoryTheme.material}
    */theme:_react.PropTypes.object,/**
     * The groupComponent prop takes an entire component which will be used to
     * create group elements for use within container elements. This prop defaults
     * to a <g> tag on web, and a react-native-svg <G> tag on mobile
     */groupComponent:_react.PropTypes.element,/**
     * The clipPathComponent prop takes an entire component which will be used to
     * create clipPath elements for use within container elements.
     */clipPathComponent:_react.PropTypes.element,/**
     * Unique clipId for clipPath
     */clipId:_react.PropTypes.number};VictoryArea.defaultProps={dataComponent:_react2.default.createElement(_victoryCore.Area,null),labelComponent:_react2.default.createElement(_victoryCore.VictoryLabel,null),scale:"linear",samples:50,standalone:true,x:"x",y:"y",containerComponent:_react2.default.createElement(_victoryCore.VictoryContainer,null),groupComponent:_react2.default.createElement("g",null),clipPathComponent:_react2.default.createElement(_victoryCore.ClipPath,null),theme:_victoryCore.VictoryTheme.grayscale};VictoryArea.getDomain=_domain2.default.getDomainWithZero.bind(_domain2.default);VictoryArea.getData=_data2.default.getData.bind(_data2.default);VictoryArea.getBaseProps=(0,_partialRight3.default)(_helperMethods2.default.getBaseProps.bind(_helperMethods2.default),fallbackProps);VictoryArea.getScale=(0,_partialRight3.default)(_helperMethods2.default.getScale.bind(_helperMethods2.default),fallbackProps);exports.default=VictoryArea;